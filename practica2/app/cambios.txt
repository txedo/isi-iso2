Cambios:

- La clase Sesion ha pasado a ser abstracta y ya no tiene asociado un usuario, para poder generalizar las sesiones de los usuarios y los beneficiarios, que ahora también pueden iniciar sesión en el sistema.

- Sesion tiene dos especializacioens: SesionUsuario y SesionBeneficiario, cada una de las cuales tiene asociado un objeto del tipo adecuado (Usuario o Beneficiario).

- Para poder identificar unívocamente a los clientes que inician sesión sin conocer su tipo, se ha añadido el método abstracto "getNombre()" a la clase Sesion, que en la clase SesionUsuario devuelve el login del usuario y en la SesionBeneficiario el NIF del beneficiario.

- Se ha cambiado el nombre de la enumeración RolesUsuario a Roles, y se ha añadido el valor Beneficiario. Esta enumeración representa los roles que puede tener un cliente que inicia sesión en el sistema; ahora esos clientes también pueden ser beneficiarios, y tal y como se ha hecho sería muy fácil definir varios tipos de beneficiarios con diferentes operaciones disponibles para cada uno de ellos.

- Debido al cambio en las sesiones, se han tenido que cambiar las operaciones de algunos gestores que accedían al campo Usuario de la Sesion, y todas las llamadas en la clase ServidorFrontend a los métodos que escribían en el log, porque se utilizaba siempre el login del usuario (ahora se llama a "getNombre()").

- En el cliente se han tenido que cambiar todas las referencias a RolesUsuario por Roles.

- Se ha creado una nueva clase ConsultaHibernate que agrupa una cadena de consulta de Hibernate y sus parámetros, de forma análoga a lo que se hizo con ComandoSQL. Esta clase tiene un método crearQuery que toma una sesión de Hibernate y devuelve una consulta específica para esa sesión.

- Modificado el GestorConexionesBD para poder realizar consultas, inserciones,  modificaciones y eliminaciones a través de Hibernate. Para las consultas se utiliza un método al que se le pasa una instancia de ConsultaHibernate, mientras que para las otras tres operaciones simplemente se pasa el objeto que se quiere crear/modificar/eliminar. Para poder realizar las operaciones más complejas de modificación de usuarios y beneficiarios, se han tenido que añadir nuevos métodos, como iniciarTransaccion, terminarTransaccion y borrarCache.

- La interfaz IConexionBD y todas las clases que la implementan se han adaptado a los nuevos métodos del GestorConexionesBD: ya no hay métodos abrir y cerrar, porque la base de datos la gestiona Hibernate; hay métodos consultar/insertar/actualizar/eliminar; y se han añadido los métodos iniciarTransaccion y borrarCache.

- Modificadas todas las clases de persistencia (FPs y Utilidades) para utilizar Hibernate. Como ahora toda la persistencia se realiza mediante Hibernate, se han eliminado todas las clases relacionadas con el agente de la bases de datos, tanto en el servidor front-end como en el de resplado (AgenteFrontend, AgenteRespaldo, ComandoSQL, etc.).

- Para que las clases del dominio sean compatibles con Hibernate, las relaciones uno-a-muchos entre clases personalizadas (por ejemplo, Beneficiario y Direccion) deben estar implementadas con colecciones de tipo Set, y no Vector como estaban en la práctica del primer cuatrimestre. Por eso, ha sido necesario modificar la clase Beneficiario y Medico y otras clases relacionadas para que pasen a utilizar clases Set.

- Aunque se ha mantenido la estructura de clases que permitiría al servidor front-end funcionar junto con el de respaldo, la gestión de la persistencia mediante Hibernate da bastantes problemas cuando se usan ambos servidores. Por eso, he deshabilitado la opción de utilizar el servidor de respaldo en la ventana principal del servidor front-end, y además, por comodidad, ahora tampoco se puede cambiar la IP de la base de datos, se supone que debe estar en la misma máquina que el servidor (esto se podría dejar como estaba cambiando dinámicamente el fichero hibernate.cfg.xml).

- El método "identificar" se ha renombrado por "identificarUsuario" y se ha creado el método "identificarBeneficiario". Se han actualizado las clases GestorSesion, ServidorFrontend y el proxy de la web.

- Añadido en el gestor de medicos el metodo para consultar un medico por login

- Añadido en el gestor de usuarios el metodo para consultar un usuario por login
	NOTA: el método para consultar por login ya estaba hecho en el FPUsuarios
	
- Para seguir manteniendo la interfaz IServidor, el identificar beneficiario se pasa al mensaje auxiliar. Lo mismo para consultar un medico por su login.

- La operacion "identificarBeneficiario" y "consultarPorLogin" solo se han añadido al proxy de la aplicación Web, pues los clientes de la aplicación de escritorio no la va a utilizar

- Para consultar un medico por login, se ha creado una operacion nueva que se llama ConsultarPropioMedico, que la puede realizar el medico o el administrador.
	NOTA: no hace falta una operacion nueva para consultar un beneficiario, pues cualquier usuario puede hacerlo.